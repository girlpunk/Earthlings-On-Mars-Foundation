"""
Django settings for earthlings_on_mars_foundation project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import logging
import logging.config
import os

from pathlib import Path
from djangoeditorwidgets.config import init_web_editor_config

logger = logging.getLogger("earthlings_on_mars_foundation.settings")

def __get_boolean(key: str, default: str = "NO") -> bool:
    """
    Return a boolean value based on whatever the user has supplied in the
    environment based on whether the value "looks like" it's True or not.
    """
    return bool(os.getenv(key, default).lower() in ("yes", "y", "1", "t", "true"))

def __get_list(
    key: str,
    default: list[str] | None = None,
    sep: str = ",",
) -> list[str]:
    """
    Return a list of elements from the environment, as separated by the given
    string, or the default if the key does not exist
    """
    if key in os.environ:
        return list(filter(None, os.environ[key].split(sep)))
    elif default is not None:
        return default
    else:
        return []


DEBUG = __get_boolean("DEBUG", "NO")

###############################################################################
# Directories                                                                 #
###############################################################################

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "/media/"


###############################################################################
# Application Definition                                                      #
###############################################################################

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'calls.apps.CallsConfig',
    'djangoeditorwidgets',
]

if DEBUG:
    INSTALLED_APPS.append("channels")


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'calls.middleware.SessionLogMiddleware',
]

ROOT_URLCONF = 'earthlings_on_mars_foundation.urls'

WSGI_APPLICATION = 'earthlings_on_mars_foundation.wsgi.application'
ASGI_APPLICATION = "earthlings_on_mars_foundation.asgi.application"

STATIC_URL = 'static/'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

WEB_EDITOR_DOWNLOAD, WEB_EDITOR_CONFIG = init_web_editor_config(
    # set the directory where files are downloaded
    STATICFILES_DIRS[0],
    # set static url prefix
    ""
)

###############################################################################
# Security                                                                    #
###############################################################################

X_FRAME_OPTIONS = "SAMEORIGIN"

#ALLOWED_HOSTS = [
#    'localhost',
#    '127.0.0.1',
#    "emf.home.foxocube.xyz"
## wss://emf.home.foxocube.xyz/ws/call/
#]

ALLOWED_HOSTS = __get_list("ALLOWED_HOSTS", ["*"])
if ALLOWED_HOSTS != ["*"]:
    # always allow localhost. Necessary e.g. for healthcheck in docker.
    ALLOWED_HOSTS.append("localhost")

TRUSTED_PROXIES = __get_list("TRUSTED_PROXIES")

USE_X_FORWARDED_HOST = __get_boolean("USE_X_FORWARD_HOST", "false")
USE_X_FORWARDED_PORT = __get_boolean("USE_X_FORWARD_PORT", "false")

SECRET_KEY = os.getenv(
    "SECRET_KEY",
    'django-insecure-zhxc(@3^y^hxralj_*++nx&qh((&4wsy4lj)6k-!%+nsc1y!*s',
)

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


###############################################################################
# Database                                                                    #
###############################################################################

def _parse_db_settings() -> dict:
    databases = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": "db.sqlite3",
            "OPTIONS": {},
        },
    }
    if os.getenv("DBHOST"):
        # Have sqlite available as a second option for management commands
        # This is important when migrating to/from sqlite
        databases["sqlite"] = databases["default"].copy()

        databases["default"] = {
            "HOST": os.getenv("DBHOST"),
            "NAME": os.getenv("DBNAME", "emf"),
            "USER": os.getenv("DBUSER", "emf"),
            "PASSWORD": os.getenv("DBPASS", "emf"),
            "OPTIONS": {},
        }
        if os.getenv("DBPORT"):
            databases["default"]["PORT"] = os.getenv("DBPORT")

        engine = "django.db.backends.postgresql"
        options = {
            "sslmode": os.getenv("DBSSLMODE", "prefer"),
            "sslrootcert": os.getenv("DBSSLROOTCERT", None),
            "sslcert": os.getenv("DBSSLCERT", None),
            "sslkey": os.getenv("DBSSLKEY", None),
        }
        if int(os.getenv("DB_POOLSIZE", 0)) > 0:
            options.update(
                {
                    "pool": {
                        "min_size": 1,
                        "max_size": int(os.getenv("DB_POOLSIZE")),
                    },
                },
            )

        databases["default"]["ENGINE"] = engine
        databases["default"]["OPTIONS"].update(options)

    if os.getenv("DB_TIMEOUT") is not None:
        if databases["default"]["ENGINE"] == "django.db.backends.sqlite3":
            databases["default"]["OPTIONS"].update(
                {"timeout": int(os.getenv("DB_TIMEOUT"))},
            )
        else:
            databases["default"]["OPTIONS"].update(
                {"connect_timeout": int(os.getenv("DB_TIMEOUT"))},
            )
            databases["sqlite"]["OPTIONS"].update(
                {"timeout": int(os.getenv("DB_TIMEOUT"))},
            )
    return databases


DATABASES = _parse_db_settings()

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


###############################################################################
# Internationalization                                                        #
###############################################################################

LANGUAGE_CODE = 'en-gb'

TIME_ZONE = 'Europe/London'

USE_I18N = True

USE_TZ = True


###############################################################################
# Logging                                                                     #
###############################################################################

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{asctime}] [{levelname}] [{name}] {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG" if DEBUG else "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {"handlers": ["console"]},
}

logging.config.dictConfig(LOGGING)
